{"version":3,"sources":["App.tsx"],"names":["App","useState","category","setCategory","text","setText","textUpdate","setTextUpdate","todos","setTodos","loadCategory","json","AsyncStorage","getItem","error","console","onChangeTextUpdate","saveTodos","newTodos","setItem","JSON","stringify","loadTodos","obj","parse","addTodo","Date","now","deleteTodo","id","Platform","OS","confirm","Alert","alert","onPress","style","cancelUpdate","isUpdating","updateTodo","updateTodoSubmit","completeTodo","complete","useEffect","styles","container","header","opacity","pressed","btnText","color","input","placeholder","placeholderTextColor","onChangeText","value","onSubmitEditing","Object","keys","map","key","completeView","todoView","todoText","name","size","updateView","inputUpdate","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","justifyContent","marginTop","fontSize","fontWeight","paddingVertical","borderRadius","marginVertical","alignItems","marginBottom"],"mappings":"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","file":"static/js/app.904d680f.chunk.js","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  ScrollView,\n  Alert,\n  Pressable,\n  Platform,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\ninterface todos {\n  [key: string]: todo;\n}\n\ninterface todo {\n  text: text;\n  category: category;\n  complete?: Boolean;\n  isUpdating?: Boolean;\n}\n\ntype category = string;\ntype text = string;\ntype id = string;\n\nconst STORAGE_KEY = \"@todos\";\nconst CATEGORY_KEY = \"@category\";\n\nexport default function App() {\n  const [category, setCategory] = useState<category>(\"todo\");\n  const [text, setText] = useState<text>(\"\");\n  const [textUpdate, setTextUpdate] = useState<text>(\"\");\n  const [todos, setTodos] = useState<todos>({});\n\n  const todo = () => {\n    try {\n      setCategory(\"todo\");\n      AsyncStorage.setItem(CATEGORY_KEY, \"todo\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const target = () => {\n    try {\n      setCategory(\"target\");\n      AsyncStorage.setItem(CATEGORY_KEY, \"target\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const dream = () => {\n    try {\n      setCategory(\"dream\");\n      AsyncStorage.setItem(CATEGORY_KEY, \"dream\");\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const loadCategory = async () => {\n    try {\n      const json = await AsyncStorage.getItem(CATEGORY_KEY);\n      if (json !== null) {\n        setCategory(json);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onChangeText = (text: text) => {\n    setText(text);\n  };\n\n  const onChangeTextUpdate = (textUpdate: text) => {\n    setTextUpdate(textUpdate);\n  };\n\n  const saveTodos = async (newTodos: todos) => {\n    try {\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(newTodos));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const loadTodos = async () => {\n    try {\n      const json = await AsyncStorage.getItem(STORAGE_KEY);\n      if (json !== null) {\n        const obj = JSON.parse(json);\n        setTodos(obj);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const addTodo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    //const newTodos = Object.assign({}, todos, {[Date.now()]: { text, category }});\n    const newTodos: todos = { ...todos, [Date.now()]: { text, category } };\n    setTodos(newTodos);\n    await saveTodos(newTodos);\n    setText(\"\");\n  };\n\n  const deleteTodo = async (id: id) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"정말 삭제하시겠습니까?\");\n      if (ok) {\n        const newTodos = { ...todos };\n        delete newTodos[id];\n        setTodos(newTodos);\n        await saveTodos(newTodos);\n      }\n    } else {\n      Alert.alert(\"항목 삭제\", \"정말 삭제하시겠습니까?\", [\n        { text: \"취소\" },\n        {\n          text: \"삭제\",\n          onPress: async () => {\n            const newTodos = { ...todos };\n            delete newTodos[id];\n            setTodos(newTodos);\n            await saveTodos(newTodos);\n          },\n          style: \"destructive\",\n        },\n      ]);\n    }\n  };\n\n  const onTextPress = (id: id) => {\n    Alert.alert(\"항목 수정/완료\", \"수정 혹은 완료 하시겠습니까?\", [\n      { text: \"취소\" },\n      { text: \"수정\", onPress: async () => updateTodo(id) },\n      { text: \"완료\", onPress: () => completeTodo(id) },\n    ]);\n  };\n\n  const cancelUpdate = async (id: id) => {\n    const newTodos = { ...todos };\n    newTodos[id].isUpdating = false;\n    setTextUpdate(\"\");\n    setTodos(newTodos);\n    await saveTodos(newTodos);\n  };\n\n  const updateTodo = async (id: id) => {\n    const newTodos = { ...todos };\n    newTodos[id].isUpdating = true;\n    setTextUpdate(newTodos[id].text);\n    setTodos(newTodos);\n    await saveTodos(newTodos);\n  };\n\n  const updateTodoSubmit = async (id: id) => {\n    if (textUpdate === \"\") {\n      return;\n    }\n    const newTodos = { ...todos };\n    newTodos[id].text = textUpdate;\n    newTodos[id].isUpdating = false;\n    setTextUpdate(\"\");\n    setTodos(newTodos);\n    await saveTodos(newTodos);\n  };\n\n  const completeTodo = (id: id) => {\n    Alert.alert(\"항목 완료\", \"정말 완료하셨습니까?\", [\n      {\n        text: \"아직\",\n        onPress: async () => {\n          const newTodos = { ...todos };\n          newTodos[id].complete = false;\n          setTodos(newTodos);\n          await saveTodos(newTodos);\n        },\n      },\n      {\n        text: \"완료\",\n        onPress: async () => {\n          const newTodos = { ...todos };\n          newTodos[id].complete = true;\n          setTodos(newTodos);\n          await saveTodos(newTodos);\n        },\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    loadCategory();\n    loadTodos();\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <Pressable\n          onPress={todo}\n          style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n        >\n          <Text\n            style={{\n              ...styles.btnText,\n              color: category === \"todo\" ? \"white\" : \"gray\",\n            }}\n          >\n            Todo\n          </Text>\n        </Pressable>\n        <Pressable\n          onPress={target}\n          style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n        >\n          <Text\n            style={{\n              ...styles.btnText,\n              color: category === \"target\" ? \"white\" : \"gray\",\n            }}\n          >\n            Target\n          </Text>\n        </Pressable>\n        <Pressable\n          onPress={dream}\n          style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n        >\n          <Text\n            style={{\n              ...styles.btnText,\n              color: category === \"dream\" ? \"white\" : \"gray\",\n            }}\n          >\n            Dream\n          </Text>\n        </Pressable>\n      </View>\n      <TextInput\n        style={styles.input}\n        placeholder={\n          category === \"todo\"\n            ? \"Todo for Target\"\n            : category === \"target\"\n            ? \"Target for Dream\"\n            : \"Dream for Life\"\n        }\n        placeholderTextColor=\"white\"\n        onChangeText={onChangeText}\n        value={text}\n        onSubmitEditing={addTodo}\n      />\n      <ScrollView>\n        {Object.keys(todos).map((key) =>\n          todos[key].category === category ? (\n            <View key={key}>\n              <View\n                style={\n                  todos[key].complete ? styles.completeView : styles.todoView\n                }\n              >\n                <Pressable\n                  onPress={() => onTextPress(key)}\n                  style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n                >\n                  <Text style={styles.todoText}>{`${todos[key].text}`}</Text>\n                </Pressable>\n                <Pressable\n                  onPress={() => deleteTodo(key)}\n                  style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n                >\n                  <Fontisto\n                    name=\"trash\"\n                    size={24}\n                    color={todos[key].complete ? \"black\" : \"gray\"}\n                  />\n                </Pressable>\n              </View>\n              {todos[key].isUpdating ? (\n                <View style={styles.updateView}>\n                  <TextInput\n                    style={styles.inputUpdate}\n                    placeholder={`Update ${todos[key].category}`}\n                    placeholderTextColor=\"white\"\n                    value={textUpdate}\n                    onChangeText={onChangeTextUpdate}\n                    onSubmitEditing={async () => updateTodoSubmit(key)}\n                  />\n                  <Pressable\n                    onPress={() => cancelUpdate(key)}\n                    style={({ pressed }) => [{ opacity: pressed ? 0.3 : 1.0 }]}\n                  >\n                    <Fontisto name=\"close-a\" size={18} color=\"white\" />\n                  </Pressable>\n                </View>\n              ) : null}\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"black\",\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginTop: 66,\n  },\n  btnText: { fontSize: 32, fontWeight: \"600\" },\n  input: {\n    backgroundColor: \"gray\",\n    color: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 30,\n    fontSize: 18,\n  },\n  inputUpdate: {\n    color: \"white\",\n    fontSize: 18,\n  },\n  todoView: {\n    marginVertical: 5,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    backgroundColor: \"#355764\",\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  completeView: {\n    marginVertical: 5,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    backgroundColor: \"gray\",\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  todoText: { color: \"white\", fontSize: 18, fontWeight: \"500\" },\n  updateView: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    backgroundColor: \"gray\",\n    borderRadius: 30,\n    marginBottom: 5,\n    flex: 1,\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n  },\n});\n"],"sourceRoot":""}